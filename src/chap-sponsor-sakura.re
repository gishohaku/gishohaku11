= 宅急便の配送手続きができるアプリの誕生秘話

//flushright{
さくらインターネット　江草 @chibiegg
//}

== はじめに

こんにちは、さくらインターネットの江草 (@chibiegg) です。

さくらインターネット株式会社の執行役員で、技術全般の統括をしています。また、並行してCIO (最高情報責任者) とCISO (最高情報セキュリティ責任者) を兼任しており、社内の情報セキュリティやコーポレートITなども担当しています。普段はソフトウェアエンジニアとしての仕事が中心で、システムのアーキテクトや、サービスを作っていたりします。

本記事では、昨年リリースした「宅急便の配送手続きができるSlackアプリ」の誕生秘話ということで、サービスの概要、開発の経緯、内部で使用している技術などを説明します。

== サービスの概要

//image[taqbin-fig1][宅急便アプリのサービスサイト][scale=0.8]


今回紹介するサービスは、宅急便をSlackで送ることができるサービスです。
ヤマト運輸さんと一緒に提供させていただいているため、サービスサイト@<fn>{^1}は少しヤマト運輸の宅急便っぽい雰囲気のページになっています。

弊社では、普段はさくらのVPS、さくらのレンタルサーバ、くらのクラウドといったITインフラを提供することをやっていますが、最近はDXの推進を支援するという側面でこういったSaaSのアプリも提供もしています。

//footnote[^1][https://www.sakura.ad.jp/taqbin/]

== サービス開発の経緯

このサービスができたきっかけとして、@<b>{社員間で宅急便を楽に送りたい}という需要がありました。

働き方の変化に伴って社員間で送る荷物がとても増えました。在宅勤務の人が増えたため、検証機材や事務用品などの物品をやり取りする際に、宅急便などの手段を使って社員から社員に荷物を送ることが必要になってきました。

しかし、弊社の場合は人事のルールとして、社員同士の個人情報はやり取りしない、社員の住所は人事だけが知っているという形になっています。そのため、相手の住所を直接聞いて送ることができません。最寄りのヤマトの営業所を聞いて、営業所留めで送って、受け取る人に伝票番号を伝え、届いたら受け取りに行ってもらうという、とても面倒なことをしていました。
これをなんとかしたいというのが本サービスの開発をスタートしたきっかけになります。

最初は社内システムとして、お客様に提供する前に1年間ほど利用しており、その頃は弊社の社員により「ちゅーる便」というコードネームがつけられました。
現在のサービス名は「ちゅーる便」ではありませんが、社員の間ではまだこのコードネームで呼ばれていたりします。

== サービスの使い方

それではサービスの紹介をします。フリマサイトなどの匿名配送のサービスを使ったことがある方であればイメージしやすいかもしれません。

=== 使い方の概略

//image[taqbin-fig2][宅急便アプリのサービスの概要][scale=0.8]

まず、荷物を送りたい人がSlack上のモーダルウインドウで受け取る人を指定して登録をします。
そうすると、アプリから受け取る人に「○○さんからこんな荷物の受け取り依頼が来ています」というメッセージが飛びます。
そこで受け取る人は、受け取る意思を示すボタンを押すと住所を入力する画面がモーダルで表示されるので、受け取る住所を入れます。

受け取る人が住所を入力すると、荷物の発送ができるようになりましたというダイレクトメッセージが届きます。
示されたQRコードとかバーコードを持って、ファミリーマートもしくはセブン-イレブン、あるいはヤマト運輸さんの営業所に荷物を持っていくと出荷することができます。
持って行くのが面倒な場合は、最寄りのPUDOステーションに投入するとか、あるいは集荷を依頼することもできるので、例えば明日の16時から18時の間に取りに来てほしいというようなこともできたりします。

これによって、送る人には受け取る人の住所は伝わらないまま宅急便の発送ができます。

=== 画面を使って説明

画面を使って、実際の動作をご覧いただきます。
実際に見てみないと便利さやどんな動作なのか伝わらないので、そういったところを中心に説明します。

左が送る人の画面、右が受け取る人の画面だと思ってください。

//image[taqbin-fig3][依頼主の名前や住所を入力][scale=0.8]

Slackアプリのショートカットから宅急便を選ぶと、上図のようなモーダルウインドウが表示されます。
まず送る人は自分の住所を入れます。すでに登録済みの場合は「登録した送り主情報を使う」を選択することで入力をスキップできます。

//image[taqbin-fig4][荷物を送る相手を選ぶ][scale=0.8]

続いて誰に送るかを選択することができますので、送る相手を選びます。

//image[taqbin-fig5][荷物の種類・品名・取り扱いに関する設定][scale=0.8]

荷物の種類として宅急便か宅急便コンパクトが利用できますのでどちらかを選びます。さらに品名を記載し、壊れ物注意や下積み厳禁などの注意事項を2つまで選べるのでもしあればチェックを付けます。費用を負担する部署の選択もできる (明細に記載されるのみです) ので、場合によってはそれも選んでいただいて、送信ボタンを押すと発送の準備ができます。

//image[taqbin-fig6][Slackの宅急便アプリからDMで荷物受取依頼の通知が来る][scale=0.8]

そうすると、次は右の画面に移りますが、受け取る人には上図のような感じで宅急便アプリからDMが届きます。

//image[taqbin-fig7][荷物を受け取る住所を入力][scale=0.8]
 
DMの画面で「住所を指定して受け取る」ボタンを押すと、受け取る住所の入力画面が出てくるので、住所を入れるだけで受け取りができます。

//image[taqbin-fig8][持ち込みか集荷依頼を選択][scale=0.8]

受け取る人が承諾すると、荷物を送る人には宅急便アプリからDMが届きます。ここで「コンビニ・ヤマト運輸の営業所へ持ち込む」ボタンを押すとQRコードとバーコードが表示されますので、これを持ってファミリーマートやセブンに荷物と一緒に持って行くだけで出荷できます。

また、集荷依頼もできます。発送する側が「集荷を依頼する」ボタンを押すとモーダルが出てきて、何日の何時に取りに来て欲しいかを設定できるようになっています。これを指定すると、発送元の住所として入力された住所にヤマト運輸のドライバーさんが集荷に来てくれます。

//image[taqbin-fig10][集荷依頼(左)と持ち込みの画面][scale=0.8]


左が集荷の画面、右が持ち込みの画面になりますが、集荷の場合は集荷希望日と集荷希望時間を指定します。加えて、お届け希望日と時間もここで指定することができます。

右はコンビニに持ち込む場合の画面です。ファミリーマートの場合はQRコードをマルチコピー機で読み取ります。セブン-イレブンではバーコードをレジで提示すると発送することができます。
お届け希望日は出荷時に指定しますので、マルチコピー機の画面やセブン-イレブンの店員さんにお届け希望日時を伝えてください。

=== 支払いについて

このサービスのメリットの一つとして、支払いが楽というのが挙げられます。
通常は、発払・着払どちらにしても、発払であればコンビニでお金を払い、着払の場合には受け取るときにお金を払いますが、会社の仕事で荷物をやり取りする場合、必ず経費精算が発生してしまうと思います。

一方で、このサービスでは発送するときや受け取るときに運賃の支払いは不要で、個別に経費精算をしなくていいという形になります。
毎月、その月に使った分をまとめて契約時に登録したクレジットカード、あるいはメールアドレスに請求を送らせていただきます。
これにより、使った荷物の分は管理者によってまとめて精算し、お支払いいただくことができるようになります。


=== 管理機能
//image[taqbin-fig11][管理機能][scale=0.8]


契約した管理者の機能として、社員の皆さんがどんな荷物をどれだけ送ったかを見るということができる管理機能も提供しています。こちらの画面では、先月の荷物の個数や金額、およびそれらの明細を見ることができます。住所は都道府県までは出ますが管理者であっても詳細はわからないようになっています。

== 技術的な話

ここからは技術的な話をしたいと思います。

今回、SlackのAPIからたたかれたり、あるいはSlackのAPIをたたくというような構造で、このシステムはほとんどSlackのアプリケーションとして実装されています。Pythonと、WebフレームワークとしてDjango REST frameworkを採用しています。その中で、今回のようなSlackアプリを作る上で特徴的な部分の話をしたいと思います。

=== Slackの3秒ルール

まず一番大きなポイントとしてSlackの3秒ルールがあります。例えば、ユーザがボタンを押したとかフォームを送信したときにSlackからこちらのシステムにリクエストが来るのですが、必ず応答を3秒以内に返さなければならないというルールです。こういったインタラクティブな操作においてユーザを待たせるとユーザ体験が悪化するため、ルールで制限するというSlackの考えがあります。

今回開発したサービスはSlackのアプリ内で提供される機能なので、我々のような外部の会社が開発したSlackアプリによるユーザ体験の悪化がSlack自体のユーザ体験の悪化に見えてしまうので、アプリケーションを作る人は必ずこれを守ってくださいねということになっています。

このルールのおかげで、ユーザである我々からは、Slackで提供されているいろいろな機能がすごくサクサク動いてるように見えます。ただし、このルールを守ってアプリケーションを作る側はいろいろと工夫の必要がありまして、それが今回の開発のメインのポイントになります。

=== 非同期処理が必須

では実際にその3秒ルールを守るためにどうするかというと、非同期処理を多用します。Slackから来たリクエストにはとりあえず何らかの応答を返しておいて、本当にしなければならない処理はバックグラウンドで非同期に行い、その後さらに追加の操作が必要になる場合は別途SlackのAPIをたたくというような処理を行います。

PythonにはCelery@<fn>{^2}という、こういった非同期のタスクを実行するためのライブラリがありますので、今回はそれを利用しています。複数のサーバでCeleryを動かしてロードバランスしたり、冗長性を持たせて障害時も問題なく動かすために、バックエンドでデータを管理するブローカーにはRedisを採用しています。また、非同期処理だけでなく、1時間に1回何かするとか、毎月1回何かするとか、毎日朝に何かするというようなスケジューリングによるタスクの実行も必要なので、そのためにCelery Beat SchedulerとRedBeatを採用しています。

//footnote[^2][https://github.com/celery/celery]

==== 非同期処理の詳細

//image[taqbin-fig12][非同期処理の詳細][scale=0.8]

非同期処理についてもう少し詳しく説明します。

今回、非同期処理でやるべきことは大きく2つあります。1つは先ほども説明したようにリクエストに対して追加でバックグラウンドで処理を行うこと、もう1つはスケジュール実行です。

今回のアプリケーションではどういったことをやってるかというと、伝票情報をヤマトさんのシステムに登録するとか、受け取る人にSlackのDMを送るなど、3秒以上かかる処理をバックグラウンドでやっています。

スケジュール実行でやっていることとしては、出荷された荷物が出荷済みになったのかとか配達済みになったのかとか、あるいは住所情報がおかしくて調査中になったのかとか、そういった荷物の情報を追跡しなければならないので、それを定期的にヤマトさんのシステムに取りに行く処理をしています。
他にも、毎日の請求金額をチェックして今月の請求予定金額を計算したりとか、毎月1回、実際に先月分の請求金額を計算して請求データを作成するとか、伝票番号登録で出荷するとはしたものの実際には持ち込まれないまま有効期限が切れた伝票を削除するとか、そういった定期的にしなければならない処理を実行しています。

CeleryにはBeat Scheduler@<fn>{^3}というスケジュール実行のシステムがあるのですが、これを複数台のサーバでロードバランスして実行するためにCelery RedBeat@<fn>{^4}というライブラリを使っています。これを利用することによって、例えば3台ぐらいでアプリケーションを動かしていたとして、1時間に1回実行しなければいけない処理が3台のうちいずれか1台で実行されるというような、複数台でのスケジューリング実行ができるようになります。

//footnote[^3][https://github.com/celery/django-celery-beat]
//footnote[^4][https://github.com/sibson/redbeat]

=== 分散データベースTiDBの利用

もう1つの技術的なポイントとして、簡単にアプリケーションを作って運用するために、弊社のさくらのクラウドで提供している「エンハンスドデータベース」@<fn>{^5}というサービスを使いました。これは、分散型のデータベースであるTiDB@<fn>{^6}をマネージドで使えるサービスであり、データベース名とパスワードだけを決めると、5〜10秒ぐらいですぐにデータベースが使えるようになっています。さくらのエンハンスドデータベースを利用することでアプリケーションの開発速度を上げたり、運用を楽にしたりということをしています。

TiDBはMySQL互換なので、MySQLを普段使っている方や、あるいはWordPressのようなMySQLで使えるアプリケーションを動かすためのデータベースとしてすぐに利用できます。ただし本物のMySQLではないので一部互換性のない機能もありますが、そのあたりはドキュメントをご参照いただければと思います。

Djangoを使う上では、TiDBを作っているPingCAPさんからDjango TiDB@<fn>{^7}というデータベースドライバーが公開されていまして、それを使って問題なく利用できます。
また、TiDBの現在のバージョンはMySQL8互換になっており、通常のMySQLドライバでも問題なく接続できます。

//image[taqbin-fig13][エンハンスドDBの作成画面][scale=0.8]

データベース作成はこんな画面になっており、データベース名とデータベース種別とリージョンとパスワードを決めていただければ、データベースがすぐに使えるようになります。

//footnote[^5][https://manual.sakura.ad.jp/cloud/appliance/enhanced-db/index.html]
//footnote[^6][https://pingcap.co.jp/tidb-overview/]
//footnote[^7][https://github.com/pingcap/django-tidb]

==== エンハンスドDBのメリット

ひとつ目のエンハンスドDBのメリットは、5秒とか10秒といった短時間でデータベースが利用可能になることです。

また、本来データベースサーバを利用する際には、容量を100GBにするか200GBにするかとか、CPUを4コアにするか8コアにするかとか、そういった容量やスペックを気にしないといけないことがありますが、エンハンスドデータベースはマネージドサービスでユーザがサーバのスペックを決める必要はないため、容量を気にせずに利用できるというところがもうひとつのメリットです。現在はβ版で無料で提供していますが、正式サービスとして課金を開始する場合も使用量に応じて課金するような形で考えています。最初は小さいデータベースで始めておいて、後から大きくなる場合を考慮しなくてもデータを入れれば大きくなるという形です。

それから、データベースサーバを運用しているとソフトウェアのバージョンアップや、ノード障害およびそれによる切り替わりなど、いろいろなことを意識しなければなりません。
マネージドサービスのエンハンスドデータベースはすべて意識せずに利用できます。
サーバに何か問題があった場合はそのSQL接続をしているコネクションは途中で切断される場合がありますが、リトライをしていただければすぐに利用を再開することができます。

==== サービスのアップデート

エンハンスドDBは2022年にリリースし、2023年5月にはサービスのアップデートを行いました。それまではTiDBだけを提供していましたが、新たにMariaDBも提供することになりました。また、従来は石狩リージョンでしか利用できなかったのですが、これを東京リージョンにも拡大しました。ですので、東京にサーバがある場合は東京でエンハンスドDBを作っていただき、石狩にサーバがある場合は石狩でエンハンスドDBを作っていただくことになります。

また、IPアドレス制限機能も追加しています。これによって、アクセス元のサーバのIPアドレスがわかっていれば、そのIPアドレスからしか自分のデータベースにつながらないように設定することで、よりセキュアな環境でご利用いただけるようになります。

== まとめ

本記事では「宅急便の配送手続きができるSlackアプリ」の開発秘話をお届けしました。Slackは無料プランでも有料プランでもこのアプリをご利用いただけます。申し込みは無料ですので、Slackをご利用でしたらぜひ使っていただければと思います。よろしくお願いします。
